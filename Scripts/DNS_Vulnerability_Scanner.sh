#!/bin/bash

# Default values
input_file=""
output_file=""

# Function to display usage
usage() {
    echo "Usage: $0 -d <domains.txt> -o <output.json>"
    exit 1
}

# Parse command-line arguments
while getopts "d:o:" opt; do
    case ${opt} in
        d ) input_file="$OPTARG" ;;
        o ) output_file="$OPTARG" ;;
        * ) usage ;;
    esac
done

# Check if required arguments are provided
if [[ -z "$input_file" || -z "$output_file" ]]; then
    usage
fi

# Check if input file exists
if [[ ! -f "$input_file" ]]; then
    echo "Error: Input file '$input_file' not found!"
    exit 1
fi

# Initialize JSON output file
echo "[]" > "$output_file"

echo "🔍 Starting DNS vulnerability scan..."

# Read the file, remove empty lines and trim spaces
while IFS= read -r domain; do
    domain=$(echo "$domain" | tr -d '[:space:]') # Trim spaces

    # Skip empty lines
    if [[ -z "$domain" ]]; then
        continue
    fi

    echo "🕵️ Scanning: $domain ..."

    # Store vulnerability results for each domain
    vuln_results=()

    ## 1️⃣ Check for Zone Transfer (AXFR) vulnerability
    ns_servers=$(dig NS +short "$domain")
    for ns in $ns_servers; do
        axfr_output=$(dig AXFR "$domain" @"$ns" 2>/dev/null)
        if [[ -n "$axfr_output" ]]; then
            echo "[⚠️] AXFR Open Zone Transfer found on: $ns"
            vuln_results+=("{\"vulnerability\": \"AXFR Open Zone Transfer\", \"server\": \"$ns\"}")
        fi
    done

    ## 2️⃣ Check for DNS Cache Poisoning vulnerability
    cache_poison_test=$(dig +norecurse @"$domain" "$domain" 2>/dev/null)
    if [[ -n "$cache_poison_test" ]]; then
        echo "[⚠️] Possible DNS Cache Poisoning detected on: $domain"
        vuln_results+=("{\"vulnerability\": \"DNS Cache Poisoning\", \"server\": \"$domain\"}")
    fi

    ## 3️⃣ Check for Subdomain Takeover (Wildcard DNS)
    subdomain_test=$(dig random123."$domain" +short)
    if [[ -n "$subdomain_test" ]]; then
        echo "[⚠️] Possible Wildcard DNS (Subdomain Takeover) on: $domain"
        vuln_results+=("{\"vulnerability\": \"Wildcard DNS (Subdomain Takeover)\", \"server\": \"$domain\"}")
    fi

    ## 4️⃣ Check for CNAME Misconfiguration (Takeover Risk)
    cname_records=$(dig CNAME +short "$domain")
    for cname in $cname_records; do
        if [[ "$cname" =~ "s3.amazonaws.com" || "$cname" =~ "github.io" || "$cname" =~ "azurewebsites.net" ]]; then
            echo "[⚠️] Potential CNAME Takeover on: $domain -> $cname"
            vuln_results+=("{\"vulnerability\": \"CNAME Takeover\", \"server\": \"$cname\"}")
        fi
    done

    ## 5️⃣ Check for NXDOMAIN Flooding vulnerability
    nxdomain_test=$(dig nonexistent123."$domain" +short)
    if [[ -z "$nxdomain_test" ]]; then
        echo "[⚠️] Possible NXDOMAIN Flooding vulnerability on: $domain"
        vuln_results+=("{\"vulnerability\": \"NXDOMAIN Flooding\", \"server\": \"$domain\"}")
    fi

    ## 6️⃣ Check for DNSSEC Misconfiguration
    dnssec_test=$(dig +dnssec "$domain" 2>/dev/null | grep "SERVFAIL")
    if [[ -n "$dnssec_test" ]]; then
        echo "[⚠️] DNSSEC Misconfiguration detected on: $domain"
        vuln_results+=("{\"vulnerability\": \"DNSSEC Misconfiguration\", \"server\": \"$domain\"}")
    fi

    ## 7️⃣ Check for Stale NS Records
    for ns in $ns_servers; do
        response=$(dig A +short "$domain" @"$ns")
        if [[ -z "$response" ]]; then
            echo "[⚠️] Possible Stale NS Record detected: $ns for $domain"
            vuln_results+=("{\"vulnerability\": \"Stale NS Record\", \"server\": \"$ns\"}")
        fi
    done

    # Save results in JSON format
    if [[ ${#vuln_results[@]} -gt 0 ]]; then
        json_entry="{\"domain\": \"$domain\", \"vulnerabilities\": [$(IFS=,; echo "${vuln_results[*]}")]}"
        jq ". += [$json_entry]" "$output_file" > temp.json && mv temp.json "$output_file"
    fi

done < "$input_file"

echo "✅ Scan completed! Results saved in $output_file"
